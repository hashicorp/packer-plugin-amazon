// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package common

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatDeregistrationProtectionOptions is an auto-generated flat version of DeregistrationProtectionOptions.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDeregistrationProtectionOptions struct {
	Enabled      *bool `mapstructure:"enabled" cty:"enabled" hcl:"enabled"`
	WithCooldown *bool `mapstructure:"with_cooldown" required:"false" cty:"with_cooldown" hcl:"with_cooldown"`
}

// FlatMapstructure returns a new FlatDeregistrationProtectionOptions.
// FlatDeregistrationProtectionOptions is an auto-generated flat version of DeregistrationProtectionOptions.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DeregistrationProtectionOptions) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDeregistrationProtectionOptions)
}

// HCL2Spec returns the hcl spec of a DeregistrationProtectionOptions.
// This spec is used by HCL to read the fields of DeregistrationProtectionOptions.
// The decoded values from this spec will then be applied to a FlatDeregistrationProtectionOptions.
func (*FlatDeregistrationProtectionOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"enabled":       &hcldec.AttrSpec{Name: "enabled", Type: cty.Bool, Required: false},
		"with_cooldown": &hcldec.AttrSpec{Name: "with_cooldown", Type: cty.Bool, Required: false},
	}
	return s
}
